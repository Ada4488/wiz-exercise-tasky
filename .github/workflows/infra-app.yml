name: infra-app

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  infra:
    name: Provision infra (Terraform + EKS)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write  # For OIDC authentication
      security-events: write  # For security scanning
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Security Scan (Checkov)
        working-directory: infra/main
        run: |
          pip install checkov
          checkov -d . --framework terraform --output cli --output junitxml --output-file-path ./
          echo "Checkov scan completed"

      - name: Terraform Security Scan (Terrascan)
        working-directory: infra/main
        run: |
          curl -L "$(curl -s https://api.github.com/repos/tenable/terrascan/releases/latest | grep -o -E "https://.+?_Darwin_x86_64.tar.gz")" -o terrascan.tar.gz
          tar -xf terrascan.tar.gz terrascan && rm terrascan.tar.gz
          chmod +x terrascan
          ./terrascan scan -d . -f json -o terrascan-results.json
          echo "Terrascan scan completed"

      - name: Terraform init & apply
        working-directory: infra/main
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="region=${{ secrets.AWS_REGION }}" \
            -var="name_prefix=wiz" \
            -var="backup_bucket=${{ secrets.MONGO_BACKUP_BUCKET }}" \
            -var="ec2_ssh_public_key=${{ secrets.EC2_SSH_PUBLIC_KEY }}"

      - name: Enable EKS control plane logs
        run: |
          CLUSTER=$(terraform -chdir=infra/main output -raw cluster_name)
          aws eks update-cluster-config --name "$CLUSTER" \
            --logging 'clusterLogging={enableTypes=["api","audit","authenticator","controllerManager","scheduler"]}'

      - name: Install AWS Load Balancer Controller (Helm)
        run: |
          CLUSTER=$(terraform -chdir=infra/main output -raw cluster_name)
          aws eks update-kubeconfig --name "$CLUSTER" --region "${{ secrets.AWS_REGION }}"
          VPC_ID=$(terraform -chdir=infra/main output -raw vpc_id)
          helm repo add eks https://aws.github.io/eks-charts
          helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n kube-system --create-namespace \
            --set clusterName="$CLUSTER" \
            --set region="${{ secrets.AWS_REGION }}" \
            --set vpcId="$VPC_ID" \
            --set serviceAccount.create=true

      - name: Show important outputs
        run: terraform -chdir=infra/main output

  app:
    name: Build + Deploy app
    runs-on: ubuntu-latest
    needs: infra   # âœ… waits for infra job to succeed
    permissions:
      contents: read
      packages: read
      id-token: write  # For OIDC authentication
      security-events: write  # For security scanning
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: ECR login
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push image
        run: |
          ECR=${{ steps.ecr.outputs.registry }}
          REPO=$(aws ecr describe-repositories --repository-names wiz-tasky --query 'repositories[0].repositoryUri' --output text || echo "$ECR/wiz-tasky")
          docker build -t "$REPO:${{ github.sha }}" .
          docker push "$REPO:${{ github.sha }}"
          # Also tag and push with the working tag
          docker tag "$REPO:${{ github.sha }}" "$REPO:with-wizexercise"
          docker push "$REPO:with-wizexercise"
          echo "IMAGE=$REPO:with-wizexercise" >> $GITHUB_ENV

      - name: (Optional) Trivy scan (non-blocking)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.IMAGE }}
          format: table
          exit-code: '0'

      - name: Update kubeconfig
        run: |
          CLUSTER=$(terraform -chdir=infra/main output -raw cluster_name)
          aws eks update-kubeconfig --name "$CLUSTER" --region "${{ secrets.AWS_REGION }}"

      - name: Setup AWS Load Balancer Controller IAM
        run: |
          # Download IAM policy
          curl -o iam_policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.7.2/docs/install/iam_policy.json
          
          # Create IAM policy if it doesn't exist
          aws iam create-policy --policy-name AWSLoadBalancerControllerIAMPolicy --policy-document file://iam_policy.json || echo "Policy already exists"
          
          # Get OIDC issuer URL
          OIDC_ISSUER=$(aws eks describe-cluster --name ${{ env.CLUSTER }} --region ${{ secrets.AWS_REGION }} --query 'cluster.identity.oidc.issuer' --output text | sed 's|https://||')
          
          # Create trust policy
          cat > trust-policy.json << EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Federated": "arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):oidc-provider/$OIDC_ISSUER"
                },
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringEquals": {
                    "$OIDC_ISSUER:sub": "system:serviceaccount:kube-system:aws-load-balancer-controller",
                    "$OIDC_ISSUER:aud": "sts.amazonaws.com"
                  }
                }
              }
            ]
          }
          EOF
          
          # Create IAM role
          aws iam create-role --role-name aws-load-balancer-controller-role --assume-role-policy-document file://trust-policy.json || echo "Role already exists"
          
          # Attach policy to role
          aws iam attach-role-policy --role-name aws-load-balancer-controller-role --policy-arn arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):policy/AWSLoadBalancerControllerIAMPolicy || echo "Policy already attached"

      - name: Install AWS Load Balancer Controller
        run: |
          # Add EKS Helm repository
          helm repo add eks https://aws.github.io/eks-charts
          helm repo update
          
          # Get VPC ID
          VPC_ID=$(terraform -chdir=infra/main output -raw vpc_id)
          
          # Install AWS Load Balancer Controller
          helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n kube-system --create-namespace \
            --set clusterName=${{ env.CLUSTER }} \
            --set region=${{ secrets.AWS_REGION }} \
            --set vpcId=$VPC_ID \
            --set serviceAccount.create=true
          
          # Annotate service account with IAM role
          kubectl annotate serviceaccount aws-load-balancer-controller -n kube-system eks.amazonaws.com/role-arn=arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/aws-load-balancer-controller-role
          
          # Restart controller to pick up new role
          kubectl rollout restart deployment/aws-load-balancer-controller -n kube-system

      - name: Wait for ALB Controller
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/aws-load-balancer-controller -n kube-system

      - name: Create namespace & RBAC
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/rbac-admin.yaml

      - name: Create Mongo URI Secret (uses VM private IP)
        run: |
          MONGO_IP=$(terraform -chdir=infra/main output -raw mongo_private_ip)
          kubectl -n tasky delete secret mongo --ignore-not-found
          kubectl -n tasky create secret generic mongo \
            --from-literal=MONGODB_URI="mongodb://wiz:WizPass123!@${MONGO_IP}:27017/?authSource=admin"

      - name: Deploy app (image injected)
        run: |
          sed "s#REPLACED_BY_CI#${IMAGE}#g" k8s/deployment.yaml | kubectl apply -f -
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml
          kubectl -n tasky rollout status deploy/tasky --timeout=180s

      - name: Show ingress
        run: kubectl -n tasky get ingress tasky-ing -o wide

